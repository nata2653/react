{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","React","Component","Header","props","Profile","name","Feed","className","AddPostForm","posts","map","item","Post","message","author","useState","count","setCount","AddCommentForm","Comment","color","onClick","Footer","App","setPosts","copy","concat","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iKAAAA,EAAOC,QAAU,IAA0B,kC,gPCYnBC,IAAMC,UAc9B,SAASC,EAAOC,GACd,OACE,oCACE,qCAEA,kBAACC,EAAD,CAASC,KAAMF,EAAME,QAK3B,SAASD,EAAQD,GACf,OACE,oCACE,qCAAWA,EAAME,OAKvB,SAASC,EAAKH,GACZ,OACE,6BAASI,UAAU,QACjB,mCACA,kBAACC,EAAD,MACCL,EAAMM,MAAMC,KAAI,SAAAC,GACf,OAAO,kBAACC,EAAD,CAAMC,QAASF,EAAKE,QAASC,OAAQH,EAAKG,aAMzD,SAASN,IACP,OACE,oCACE,6CAKN,SAASI,EAAKT,GAAQ,IAAD,EACOY,mBAAS,GADhB,mBACZC,EADY,KACLC,EADK,KAMnB,OACE,6BAASV,UAAU,QACjB,mCACA,4BAAKJ,EAAMU,SACX,4BAAKV,EAAMW,QACX,kBAACI,EAAD,MACA,kBAACC,EAAD,MACA,kBAACA,EAAD,MACA,wDAA8BH,EAA9B,UACA,kBAAC,IAAD,CAAQI,MAAM,UAAUC,QAZb,WACbJ,EAASD,EAAQ,KAWf,SAON,SAASE,IACP,OACE,oCACE,gDAKN,SAASC,IACP,OACE,oCACE,uCAKN,SAASG,EAAOnB,GACd,OACE,oCACE,qCACA,oCAAUA,EAAME,OAqCPkB,MAhCf,SAAapB,GACX,IADkB,EAIQY,mBAAS,CACjC,CACEF,QAAS,MACTC,OAAQ,aAPM,mBAIXL,EAJW,KAIJe,EAJI,KAmBlB,OACE,yBAAKjB,UAAU,OACb,kBAAC,IAAD,CAAQa,MAAM,SAASC,QAV3B,WACE,IAAMI,EAAOhB,EAAMiB,OAAO,CACxBb,QAAS,UACTC,OAAQ,gBAEVU,EAASC,IAKkClB,UAAU,aAAnD,gBAGA,kBAACL,EAAD,CAAQG,KAvBC,YAwBT,kBAACC,EAAD,CAAMG,MAAOA,IACb,kBAACa,EAAD,CAAQjB,KAzBC,YA0BT,kBAAC,eAAD,QC9HcsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f2ad9374.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { functionTypeAnnotation } from \"@babel/types\";\nimport { useState } from \"react\";\nimport Input from \"muicss/lib/react/input\";\nimport Textarea from \"muicss/lib/react/textarea\";\nimport Button from \"muicss/lib/react/button\";\nimport Tabs from \"muicss/lib/react/tabs\";\nimport Tab from \"muicss/lib/react/tab\";\nimport { SliderPicker } from \"react-color\";\n\nclass Component extends React.Component {\n  state = {\n    background: \"#fff\"\n  };\n\n  handleChangeComplete = color => {\n    this.setState({ background: color.hex });\n  };\n\n  render() {\n    return <SliderPicker color={this.state.background} onChangeComplete={this.handleChangeComplete} />;\n  }\n}\n\nfunction Header(props) {\n  return (\n    <>\n      <p>Header</p>\n\n      <Profile name={props.name} />\n    </>\n  );\n}\n\nfunction Profile(props) {\n  return (\n    <>\n      <h1>Hello {props.name}</h1>\n    </>\n  );\n}\n\nfunction Feed(props) {\n  return (\n    <section className=\"feed\">\n      <p>Feed</p>\n      <AddPostForm />\n      {props.posts.map(item => {\n        return <Post message={item.message} author={item.author} />;\n      })}\n    </section>\n  );\n}\n\nfunction AddPostForm() {\n  return (\n    <>\n      <p>Add Post Form</p>\n    </>\n  );\n}\n\nfunction Post(props) {\n  const [count, setCount] = useState(0);\n\n  const update = () => {\n    setCount(count + 1);\n  };\n  return (\n    <article className=\"post\">\n      <p>Post</p>\n      <h3>{props.message}</h3>\n      <h4>{props.author}</h4>\n      <AddCommentForm />\n      <Comment />\n      <Comment />\n      <h3>You have liked this post {count} times</h3>\n      <Button color=\"primary\" onClick={update}>\n        Like\n      </Button>\n    </article>\n  );\n}\n\nfunction AddCommentForm() {\n  return (\n    <>\n      <p>Add Comment Form</p>\n    </>\n  );\n}\n\nfunction Comment() {\n  return (\n    <>\n      <p>Comment</p>\n    </>\n  );\n}\n\nfunction Footer(props) {\n  return (\n    <>\n      <p>Footer</p>\n      <p>Hello {props.name}</p>\n    </>\n  );\n}\n\nfunction App(props) {\n  const name = \"Natalie\"; //Pass to profile and footer\n  // const posts = [<Post />, <Post />, <Post />]; //Pass to feed\n\n  const [posts, setPosts] = useState([\n    {\n      message: \"Hej\",\n      author: \"Natalie\"\n    }\n  ]);\n\n  function addPost() {\n    const copy = posts.concat({\n      message: \"God dag\",\n      author: \"En flink en\"\n    });\n    setPosts(copy);\n  }\n\n  return (\n    <div className=\"App\">\n      <Button color=\"accent\" onClick={addPost} className=\"addButton\">\n        Add new post\n      </Button>\n      <Header name={name} />\n      <Feed posts={posts} />\n      <Footer name={name} />\n      <SliderPicker></SliderPicker>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}